"use strict";(self.webpackChunkaquarius_docs=self.webpackChunkaquarius_docs||[]).push([[886],{9797:(i,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"circuit-simulator/basics/wiring-circuits","title":"Wiring Circuits","description":"Overview","source":"@site/docs/circuit-simulator/basics/wiring-circuits.md","sourceDirName":"circuit-simulator/basics","slug":"/circuit-simulator/basics/wiring-circuits","permalink":"/aquarius-docs/circuit-simulator/basics/wiring-circuits","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Wiring Circuits","sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Adding Components","permalink":"/aquarius-docs/circuit-simulator/basics/adding-components"},"next":{"title":"Running a Simulation","permalink":"/aquarius-docs/circuit-simulator/basics/running-a-simulation"}}');var s=n(4848),r=n(8453),c=n(6025);const a={title:"Wiring Circuits",sidebar_position:2},o=void 0,l={},d=[{value:"Overview",id:"overview",level:2},{value:"Contacts",id:"contacts",level:2},{value:"Adding Wires",id:"adding-wires",level:2},{value:"Moving Wires",id:"moving-wires",level:2},{value:"Deleting Wires",id:"deleting-wires",level:2}];function u(i){const e={a:"a",code:"code",h2:"h2",p:"p",...(0,r.R)(),...i.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(e.p,{children:"To build a functional circuit, components must be interconnected using wiring.\nThis process establishes the electrical paths that define the circuit's behaviour and signal flow.\nWires are symbolic and have zero resistance."}),"\n",(0,s.jsx)(e.h2,{id:"contacts",children:"Contacts"}),"\n",(0,s.jsxs)(e.p,{children:["Components in circuits have a number of electrical contacts.\nWhen these are not connected they display as white circles.\nFor devices, these contacts are labelled with contact names as defined in the device editor (see ",(0,s.jsx)(e.a,{href:"/aquarius-docs/device-editor/contacts",children:"Contacts"}),").\nMoving the cursor over a contact will display a cross."]}),"\n",(0,s.jsx)(e.h2,{id:"adding-wires",children:"Adding Wires"}),"\n",(0,s.jsx)(e.p,{children:"Left-click on a contact to begin drawing a wire."}),"\n",(0,s.jsx)("p",{align:"center",children:(0,s.jsx)("img",{src:(0,c.Ay)("img/circuit-simulator/basics/wiring-circuits/01.png")})}),"\n",(0,s.jsx)(e.p,{children:"Left-click anywhere on the canvas while drawing a wire to create a fixed point in the wire.\nThis is useful for routing wires around other components."}),"\n",(0,s.jsx)("p",{align:"center",children:(0,s.jsx)("img",{src:(0,c.Ay)("img/circuit-simulator/basics/wiring-circuits/02.png")})}),"\n",(0,s.jsx)(e.p,{children:"Left-click on another contact or wire to complete the wire."}),"\n",(0,s.jsx)("p",{align:"center",children:(0,s.jsx)("img",{src:(0,c.Ay)("img/circuit-simulator/basics/wiring-circuits/03.png")})}),"\n",(0,s.jsx)(e.h2,{id:"moving-wires",children:"Moving Wires"}),"\n",(0,s.jsx)(e.p,{children:"Once a wire is created, the start and end contacts are fixed. Moving the wire is purely visual.\nWhen moving components, wires attached to the component will automatically move to maintain their connections.\nWires can be manually moved by left-clicking and dragging a straight section of wire."}),"\n",(0,s.jsx)(e.h2,{id:"deleting-wires",children:"Deleting Wires"}),"\n",(0,s.jsxs)(e.p,{children:["Wires can be deleted by left-clicking the wire to select it and pressing the ",(0,s.jsx)(e.code,{children:"delete"})," key."]})]})}function h(i={}){const{wrapper:e}={...(0,r.R)(),...i.components};return e?(0,s.jsx)(e,{...i,children:(0,s.jsx)(u,{...i})}):u(i)}},8453:(i,e,n)=>{n.d(e,{R:()=>c,x:()=>a});var t=n(6540);const s={},r=t.createContext(s);function c(i){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof i?i(e):{...e,...i}}),[e,i])}function a(i){let e;return e=i.disableParentContext?"function"==typeof i.components?i.components(s):i.components||s:c(i.components),t.createElement(r.Provider,{value:e},i.children)}}}]);